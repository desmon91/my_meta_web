/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export default function Avatar({ waveHand, setWaveHand, ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/myavatar_ready.glb");
  const { actions, mixer } = useAnimations(animations, group);

  const music = {
    looking: new Audio("/looking.mp3"),
    hiphop: new Audio("/hiphop.m4a"),
    hiphop2: new Audio("/hiphop2.mp3"),
    gangnam: new Audio("/gangnam.mp3"),
  };

  useEffect(() => {
    if (waveHand) {
      previousAnimation = nextAnimation;
      nextAnimation = "looking";
      changeAnimation(previousAnimation, nextAnimation);
    }
  }, [waveHand]);

  let nextAnimation = "idle";
  let previousAnimation = "idle";

  useFrame(() => {
    actions[nextAnimation].play(); //play initial animation on mount
  });

  let playAnimation = false; // to control onclik animation

  const defaultMusic = music["looking"];

  const setMusic = (name) => {
    defaultMusic.play();
    if (name !== "looking") {
      if (music[name].paused) {
        defaultMusic.pause();
        music[name].play();
      } else {
        music[name].pause();
        music[name].currentTime = 0;
        defaultMusic.play();
      }
    }
  };

  const changeAnimation = (prevAction, nextAction) => {
    playAnimation = true;
    setWeight(actions[nextAction], 1);
    setMusic(nextAction);
    actions[prevAction].crossFadeTo(actions[nextAction], 0.5, true);

    mixer.addEventListener("loop", onLoopFinished);
    function onLoopFinished(event) {
      playAnimation = false;
      mixer.removeEventListener("loop", onLoopFinished);
      previousAnimation = nextAnimation;
      nextAnimation = "idle";
      setMusic(nextAction);
      idleAction();
    }
  };
  // as per documentation
  // This function is needed, since animationAction.crossFadeTo() disables its start action and sets
  // the start action's timeScale to ((start animation's duration) / (end animation's duration))
  // Not only the start action, but also the end action must get a weight of 1 before fading
  // (concerning the start action this is already guaranteed in this place)
  function setWeight(action) {
    action.time = 0;
    action.enabled = true;
    action.setEffectiveTimeScale(1);
    action.setEffectiveWeight(1);
  }
  const idleAction = () => {
    setWeight(actions["idle"]);
    actions[previousAnimation].crossFadeTo(actions["idle"], 0.1, true);
  };
  const ACTION_LIST = ["hiphop", "hiphop2", "gangnam"];

  const shuffleAction = () => {
    const action_id = Math.floor(Math.random() * 3); //random number from 0-2
    previousAnimation = nextAnimation;
    nextAnimation = ACTION_LIST[action_id];
    changeAnimation(previousAnimation, nextAnimation, false);
  };

  const handleCharacterClick = () => {
    if (!playAnimation) {
      shuffleAction();
    }
  };

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onPointerDown={() => handleCharacterClick()}
    >
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Hips} />
          <primitive object={nodes.Ctrl_Master} />
          <primitive object={nodes.Ctrl_ArmPole_IK_Left} />
          <primitive object={nodes.Ctrl_Hand_IK_Left} />
          <primitive object={nodes.Ctrl_ArmPole_IK_Right} />
          <primitive object={nodes.Ctrl_Hand_IK_Right} />
          <primitive object={nodes.Ctrl_Foot_IK_Left} />
          <primitive object={nodes.Ctrl_LegPole_IK_Left} />
          <primitive object={nodes.Ctrl_Foot_IK_Right} />
          <primitive object={nodes.Ctrl_LegPole_IK_Right} />
          <skinnedMesh
            name="Wolf3D_Avatar"
            geometry={nodes.Wolf3D_Avatar.geometry}
            material={materials["Wolf3D_Avatar.001"]}
            skeleton={nodes.Wolf3D_Avatar.skeleton}
            morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary}
            morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences}
          />
        </group>
        <group name="cs_grp">
          <group name="cs_arm_fk" position={[1.5, 8.5, 0]} scale={0.82} />
          <group name="cs_calf_fk" position={[0.5, 8.5, 0]} scale={0.82} />
          <group name="cs_circle" position={[0.5, 4.5, 0]} scale={0.21} />
          <group name="cs_circle001" position={[0.5, 4.5, 0]} scale={0.21} />
          <group name="cs_circle_025" position={[2.5, 4.5, 0]} scale={0.21} />
          <group
            name="cs_foot"
            position={[0.5, 10.5, 0]}
            rotation={[-Math.PI, 0, 0]}
            scale={0.31}
          />
          <group
            name="cs_foot001"
            position={[0.5, 10.5, 0]}
            rotation={[-Math.PI, 0, 0]}
            scale={0.31}
          />
          <group
            name="cs_foot002"
            position={[0.5, 10.5, 0]}
            rotation={[-Math.PI, 0, 0]}
            scale={0.31}
          />
          <group
            name="cs_foot_01"
            position={[0.5, 18.5, 0]}
            rotation={[0, Math.PI / 2, 0]}
            scale={2.19}
          />
          <group name="cs_foot_roll" position={[0.5, 12.5, 0]} scale={0.59} />
          <group name="cs_forearm_fk" position={[2.5, 8.5, 0]} scale={0.82} />
          <group
            name="cs_hand"
            position={[0.5, 19.5, 0]}
            rotation={[-Math.PI, 0, 0]}
            scale={0.31}
          />
          <group name="cs_head" position={[0.5, 13.5, 0]} scale={0.21} />
          <group name="cs_hips" position={[0.5, 11.5, 0]} scale={0.21} />
          <group name="cs_master" position={[0.5, 17.5, 0]} scale={0.1} />
          <group name="cs_neck" position={[0.5, 14.5, 0]} scale={0.21} />
          <group
            name="cs_shoulder_left"
            position={[0.5, 15.5, 0]}
            rotation={[-Math.PI, -Math.PI / 2, 0]}
            scale={1.04}
          />
          <group
            name="cs_shoulder_right"
            position={[0.5, 16.5, 0]}
            rotation={[-Math.PI, -Math.PI / 2, 0]}
            scale={1.04}
          />
          <group name="cs_sphere" position={[0.5, 2.5, 0]} scale={0.21} />
          <group name="cs_sphere_012" position={[3.5, 2.5, 0]} scale={0.21} />
          <group
            name="cs_square"
            position={[1.5, 1.5, 0]}
            rotation={[-Math.PI, 0, 0]}
            scale={0.15}
          />
          <group
            name="cs_square_2"
            position={[0.5, 1.5, 0]}
            rotation={[-Math.PI, 0, 0]}
            scale={0.15}
          />
          <group name="cs_thigh_fk" position={[0.5, 7.5, 0]} scale={0.82} />
          <group name="cs_toe" position={[0.5, 9.5, 0]} scale={0.43} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/myavatar_ready.glb");
