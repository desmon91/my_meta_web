/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import {
  usePlane,
  useBox,
  useCylinder,
  useHeightfield,
  useConvexPolyhedron,
} from "@react-three/cannon";
import { Mesh } from "three";
import { Geometry } from "three-stdlib";

export default function Terrain({ ...props }) {
  const group = useRef();
  const [barrelRef1, barrelRef1Api] = useCylinder(
    () => ({
      mass: 20,

      position: [-2.7, 0.5, -3.91],
      args: [0.3, 0.3, 0.78, 8],
      ...props,
    }),
    useRef < Mesh > null
  );
  const [barrelRef2, barrelRef2Api] = useCylinder(
    () => ({
      mass: 20,
      position: [-3.34, 0.5, -3.27],
      args: [0.3, 0.3, 0.78, 8],
      ...props,
    }),
    useRef < Mesh > null
  );
  const [barrelRef3, barrelRef3Api] = useCylinder(
    () => ({
      mass: 20,
      position: [-3.33, 1.3, -3.9],
      args: [0.3, 0.3, 0.78, 8],
      ...props,
    }),
    useRef < Mesh > null
  );
  const [barrelRef4, barrelRef4Api] = useCylinder(
    () => ({
      mass: 20,
      position: [-3.34, 0.5, -3.91],
      args: [0.3, 0.3, 0.78, 8],
      ...props,
    }),
    useRef < Mesh > null
  );

  const [stoneFloorRef] = useBox(() => ({
    args: [2.1, 0.2, 1.65],
    position: [-3.15, -0.04, -3.75],
    type: "Static",
  }));

  const { nodes, materials } = useGLTF("/terrain.glb");

  function toConvexProps(bufferGeometry) {
    const geo = new Geometry().fromBufferGeometry(bufferGeometry);
    // Merge duplicate vertices resulting from glTF export.
    // Cannon assumes contiguous, closed meshes to work
    geo.mergeVertices();
    return [geo.vertices.map((v) => [v.x, v.y, v.z]), geo.faces.map((f) => [f.a, f.b, f.c]), []]; // prettier-ignore
  }

  const groundGeo = useMemo(
    () => toConvexProps(nodes.Cylinder030.geometry),
    [nodes]
  );
  const [groundRef] = useConvexPolyhedron(() => ({
    position: [0.01, -1.38, 0.06],
    material: { friction: 0.2, resitution: 0.8 },
    ...props,
    args: groundGeo,
    type: "Static",
  }));

  return (
    <group ref={group} {...props} dispose={null}>
      <group
        ref={barrelRef2}
        onPointerDown={() => {
          barrelRef2Api.applyImpulse([0, 20, 5], [0, 0, 0]);
        }}
      >
        <mesh geometry={nodes.Cylinder002.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Cylinder002_1.geometry}
          material={materials.meatl}
        />
      </group>
      <group
        ref={barrelRef3}
        onPointerDown={() => {
          barrelRef3Api.applyImpulse([0, 20, 5], [0, 0, 0]);
        }}
      >
        <mesh geometry={nodes.Cylinder003.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Cylinder003_1.geometry}
          material={materials.meatl}
        />
      </group>
      <group
        ref={barrelRef4}
        onPointerDown={() => {
          barrelRef4Api.applyImpulse([0, 20, 5], [0, 0, 0]);
        }}
      >
        <mesh geometry={nodes.Cylinder004.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Cylinder004_1.geometry}
          material={materials.meatl}
        />
      </group>
      <mesh
        ref={stoneFloorRef}
        geometry={nodes.stone_floor.geometry}
        material={materials.stone}
        position={[-3.15, -0.04, -3.75]}
      />
      <group
        ref={barrelRef1}
        onPointerDown={() => {
          barrelRef1Api.applyImpulse([0, 20, 5], [0, 0, 0]);
        }}
      >
        <mesh geometry={nodes.Cylinder001.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Cylinder001_1.geometry}
          material={materials.meatl}
        />
      </group>
      <mesh
        geometry={nodes.Fence.geometry}
        material={materials.wood}
        position={[3.19, -0.09, 5.65]}
      />
      <group>
        <mesh
          ref={groundRef}
          geometry={nodes.Cylinder030.geometry}
          material={materials.grass}
        />
      </group>
      <mesh
        geometry={nodes.Fence001.geometry}
        material={materials.wood}
        position={[-0.12, -0.22, -5.96]}
      />
      <group position={[-6.79, 2.78, -2.26]}>
        <mesh geometry={nodes.Cylinder056.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Cylinder056_1.geometry}
          material={materials["Material.007"]}
        />
      </group>
      <group position={[0.54, 1.5, 8.12]}>
        <mesh geometry={nodes.Cylinder062.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Cylinder062_1.geometry}
          material={materials["Material.007"]}
        />
      </group>
      <mesh
        geometry={nodes.Rock1.geometry}
        material={materials.stone}
        position={[2.11, -0.79, 7.13]}
      />
      <mesh
        geometry={nodes.Rock2.geometry}
        material={materials.stone}
        position={[-5.22, -1.11, 5.7]}
      />
      <mesh
        geometry={nodes.Rock3.geometry}
        material={materials.stone}
        position={[7.6, -0.67, -0.95]}
      />
      <mesh
        geometry={nodes.Rock4.geometry}
        material={materials.stone}
        position={[4.35, -0.73, -3.68]}
      />
      <mesh
        geometry={nodes.Rock5.geometry}
        material={materials.stone}
        position={[-4.63, -0.82, 2.56]}
      />
      <mesh
        geometry={nodes.Rock6.geometry}
        material={materials["stone.001"]}
        position={[-3.7, -0.62, 3.44]}
      />
      <mesh
        geometry={nodes.Rock7.geometry}
        material={materials["stone.001"]}
        position={[-4.92, -0.82, 3.61]}
      />
      <mesh
        geometry={nodes.Rock8.geometry}
        material={materials["stone.001"]}
        position={[7.55, -0.45, 0.29]}
      />
      <mesh
        geometry={nodes.Rock9.geometry}
        material={materials["stone.001"]}
        position={[6.46, -0.53, -0.08]}
      />
      <mesh
        geometry={nodes.Rock10.geometry}
        material={materials["stone.001"]}
        position={[4.18, -0.68, 7.78]}
      />
      <mesh
        geometry={nodes.Grass1.geometry}
        material={materials["Material.008"]}
        position={[1.27, -0.45, 8.53]}
      />
      <mesh
        geometry={nodes.Grass2.geometry}
        material={materials["Material.008"]}
        position={[-1.68, -0.28, 5.77]}
      />
      <mesh
        geometry={nodes.Grass3.geometry}
        material={materials["Material.008"]}
        position={[-7.79, -0.48, 4.11]}
      />
      <mesh
        geometry={nodes.Grass4.geometry}
        material={materials["Material.008"]}
        position={[2.87, -0.03, 0.5]}
      />
      <mesh
        geometry={nodes.Grass5.geometry}
        material={materials["Material.008"]}
        position={[-3.22, -0.28, -5.07]}
      />
      <mesh
        geometry={nodes.Grass7.geometry}
        material={materials["Material.008"]}
        position={[8.58, -0.28, -0.17]}
      />
      <mesh
        geometry={nodes.Grass8.geometry}
        material={materials["Material.008"]}
        position={[6.24, -0.28, 5.68]}
      />
      <mesh
        geometry={nodes.Grass9.geometry}
        material={materials["Material.008"]}
        position={[2.81, -0.25, 5.2]}
      />
      <mesh
        geometry={nodes.Grass10.geometry}
        material={materials["Material.008"]}
        position={[-4.49, -0.5, 6.43]}
      />
      <mesh
        geometry={nodes.Grass11.geometry}
        material={materials["Material.008"]}
        position={[4.46, -0.11, -0.96]}
      />
      <mesh
        geometry={nodes.Grass6.geometry}
        material={materials["Material.008"]}
        position={[2.75, -0.2, -6.27]}
      />
    </group>
  );
}

useGLTF.preload("/terrain.glb");
